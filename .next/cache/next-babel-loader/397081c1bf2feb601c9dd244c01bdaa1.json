{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rsale\\\\Documents\\\\SSB\\\\pages\\\\personalTable.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Icon, Label, Menu, Table } from 'semantic-ui-react';\n\nfunction formatNumber(number) {\n  if (number >= 1000000) {\n    return formatter.format(round(number / 1000000, 2)) + 'M';\n  } else if (number >= 1000) {\n    return formatter.format(round(number / 1000, 2)) + 'K';\n  } else {\n    return round(number, 2);\n  }\n} // items will be populated at build time by getStaticProps()\n\n\nfunction PersonalTable(_ref) {\n  var _this = this;\n\n  var bazaarItems = _ref.bazaarItems;\n  return __jsx(Table, {\n    celled: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }\n  }, __jsx(Table.Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }\n  }, __jsx(Table.Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 17\n    }\n  }, __jsx(Table.HeaderCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 21\n    }\n  }, \"Name\"), __jsx(Table.HeaderCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 21\n    }\n  }, \"Quantity\"), __jsx(Table.HeaderCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 21\n    }\n  }, \"Invested\"), __jsx(Table.HeaderCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 21\n    }\n  }, \"Estimated Profit\"), __jsx(Table.HeaderCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 21\n    }\n  }, \"Gradient\"))), __jsx(Table.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }\n  }, bazaarItems.map(function (item) {\n    return __jsx(Table.Row, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 21\n      }\n    }, __jsx(Table.Cell, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 25\n      }\n    }, __jsx(Label, {\n      ribbon: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 29\n      }\n    }, item.name)), __jsx(Table.Cell, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 25\n      }\n    }, item.evolume, \" \"), __jsx(Table.Cell, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 25\n      }\n    }, item.invested), __jsx(Table.Cell, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 25\n      }\n    }, formatNumber(item.eprofit), \" ( \", item.pprofit, \"% ) \"), __jsx(Table.Cell, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 25\n      }\n    }, item.gradient < 0 ? 'Product sell value decreasing' : 'Product sell value increasing'));\n  })));\n}\n\n_c = PersonalTable;\nexport var __N_SSP = true;\nexport default PersonalTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"PersonalTable\");","map":{"version":3,"sources":["C:/Users/rsale/Documents/SSB/pages/personalTable.js"],"names":["React","Icon","Label","Menu","Table","formatNumber","number","formatter","format","round","PersonalTable","bazaarItems","map","item","name","evolume","invested","eprofit","pprofit","gradient"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,IAAtB,EAA4BC,KAA5B,QAAyC,mBAAzC;;AAKA,SAASC,YAAT,CAAsBC,MAAtB,EAA8B;AAC1B,MAAIA,MAAM,IAAI,OAAd,EAAuB;AACnB,WAAOC,SAAS,CAACC,MAAV,CAAiBC,KAAK,CAACH,MAAM,GAAG,OAAV,EAAmB,CAAnB,CAAtB,IAA+C,GAAtD;AACH,GAFD,MAEO,IAAIA,MAAM,IAAI,IAAd,EAAoB;AACvB,WAAOC,SAAS,CAACC,MAAV,CAAiBC,KAAK,CAACH,MAAM,GAAG,IAAV,EAAgB,CAAhB,CAAtB,IAA4C,GAAnD;AACH,GAFM,MAEA;AACH,WAAOG,KAAK,CAACH,MAAD,EAAS,CAAT,CAAZ;AACH;AACJ,C,CAGD;;;AACA,SAASI,aAAT,OAAwC;AAAA;;AAAA,MAAfC,WAAe,QAAfA,WAAe;AACpC,SACI,MAAC,KAAD;AAAO,IAAA,MAAM,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,KAAD,CAAO,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,KAAD,CAAO,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,KAAD,CAAO,UAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,EAEI,MAAC,KAAD,CAAO,UAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,EAGI,MAAC,KAAD,CAAO,UAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHJ,EAII,MAAC,KAAD,CAAO,UAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAJJ,EAKI,MAAC,KAAD,CAAO,UAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALJ,CADJ,CADJ,EAUI,MAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKA,WAAW,CAACC,GAAZ,CAAgB,UAACC,IAAD;AAAA,WACb,MAAC,KAAD,CAAO,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,MAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,MAAC,KAAD;AAAO,MAAA,MAAM,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAeA,IAAI,CAACC,IAApB,CADJ,CADJ,EAII,MAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAaD,IAAI,CAACE,OAAlB,MAJJ,EAKI,MAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAaF,IAAI,CAACG,QAAlB,CALJ,EAMI,MAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAaX,YAAY,CAACQ,IAAI,CAACI,OAAN,CAAzB,SAA4CJ,IAAI,CAACK,OAAjD,SANJ,EAOI,MAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAaL,IAAI,CAACM,QAAL,GAAgB,CAAhB,GAAoB,+BAApB,GAAsD,+BAAnE,CAPJ,CADa;AAAA,GAAhB,CADL,CAVJ,CADJ;AA0BD;;KA3BMT,a;;AAgKP,eAAeA,aAAf","sourcesContent":["import React from 'react';\r\nimport { Icon, Label, Menu, Table } from 'semantic-ui-react'\r\n\r\n\r\n\r\n\r\nfunction formatNumber(number) {\r\n    if (number >= 1000000) {\r\n        return formatter.format(round(number / 1000000, 2)) + 'M'\r\n    } else if (number >= 1000) {\r\n        return formatter.format(round(number / 1000, 2)) + 'K'\r\n    } else {\r\n        return round(number, 2)\r\n    }\r\n}\r\n  \r\n\r\n// items will be populated at build time by getStaticProps()\r\nfunction PersonalTable({ bazaarItems }) {\r\n    return (\r\n        <Table celled>\r\n            <Table.Header>\r\n                <Table.Row>\r\n                    <Table.HeaderCell>Name</Table.HeaderCell>\r\n                    <Table.HeaderCell>Quantity</Table.HeaderCell>\r\n                    <Table.HeaderCell>Invested</Table.HeaderCell>\r\n                    <Table.HeaderCell>Estimated Profit</Table.HeaderCell>\r\n                    <Table.HeaderCell>Gradient</Table.HeaderCell>\r\n                </Table.Row>\r\n            </Table.Header>\r\n            <Table.Body>\r\n                {bazaarItems.map((item) => (\r\n                    <Table.Row>\r\n                        <Table.Cell>\r\n                            <Label ribbon>{item.name}</Label>\r\n                        </Table.Cell>\r\n                        <Table.Cell>{item.evolume} </Table.Cell>\r\n                        <Table.Cell>{item.invested}</Table.Cell>\r\n                        <Table.Cell>{formatNumber(item.eprofit)} ( {item.pprofit}% ) </Table.Cell>\r\n                        <Table.Cell>{item.gradient < 0 ? 'Product sell value decreasing' : 'Product sell value increasing'}</Table.Cell>\r\n                    </Table.Row>\r\n                ))}\r\n            </Table.Body>\r\n        </Table>\r\n    )\r\n  }\r\n\r\n  function advise(balance, count = 6, time = 5, include_stablity = true, item_cache) {\r\n    //console.log(advise);\r\n\r\n    const unsorted = []\r\n\r\n    for (const product_name in item_cache) {\r\n        const product = item_cache[product_name]\r\n        //console.log(product);\r\n        const profit = (product.sell * 0.99) - product.buy\r\n\r\n        const tvolume = (Math.min(product.volume, product.svolume) / 10080) * time\r\n        const evolume = Math.floor(limit(tvolume, 0, balance / product.buy))\r\n\r\n        const eprofit = (evolume * profit)\r\n\r\n        unsorted.push({\r\n            'name': product_name,\r\n            'evolume': evolume,\r\n            'invested': (product.buy * evolume).toFixed(2),\r\n            'pinvested': (((product.buy * evolume) * 100) / balance).toFixed(1),\r\n            'eprofit': eprofit.toFixed(2),\r\n            'pprofit': ((profit / product.buy) * 100).toFixed(1),\r\n            'gradient': product.sell - product.sell_ema\r\n        })\r\n    }\r\n\r\n    const sorted = unsorted.sort((a, b) => {\r\n        return b.eprofit - a.eprofit\r\n    })\r\n\r\n    //console.log(sorted);\r\n\r\n    //console.log(\"Length \" + sorted.length);\r\n\r\n    if (include_stablity) return sorted.filter(item => (item_cache[item.name].buy > item_cache[item.name].buy_ema) && (item_cache[item.name].sell > item_cache[item.name].sell_ema)).slice(0, count)\r\n    \r\n    //console.log(\"Length \" + sorted.length);\r\n\r\n    //console.log(sorted.slice(0, 6));\r\n\r\n    return sorted.slice(0, count);\r\n}\r\n\r\n\r\n  // This function gets called at build time on server-side.\r\n  // It won't be called on client-side, so you can even do\r\n  // direct database queries. See the \"Technical details\" section.\r\n  export async function getServerSideProps() {\r\n    console.log(\"start\");\r\n    // Call an external API endpoint to get posts.\r\n    // You can use any data fetching library\r\n    \r\n    const api_res = await fetch(`https://api.hypixel.net/skyblock/bazaar?key=92e1a16e-382e-4840-b482-7966d24f2c1a`);\r\n    const json = await api_res.json();\r\n\r\n    const prettyNames_res = await fetch(`https://api.slothpixel.me/api/constants/skyblock_items`);\r\n    const nameJson = await prettyNames_res.json();\r\n\r\n    let item_cache = {};\r\n  \r\n    // By returning { props: posts }, the Blog component\r\n    // will receive `posts` as a prop at build time\r\n\r\n\r\n    \r\n    //console.log(json['products']['INK_SACK:3']['sell_summary'][0]['pricePerUnit']);\r\n\r\n    console.log(\"test\");\r\n\r\n    const items = Object.keys(json['products']).map(function (key) {\r\n        if(key === 'ENCHANTED_CARROT_ON_A_STICK') return {\r\n            'name': \"broken\",\r\n            'buy': 1,\r\n            'sell': 1,\r\n            'volume': 1,\r\n            'svolume': 1\r\n        }\r\n        console.log(nameJson[key]['name'] + \" | \" + key);\r\n        return {\r\n            'name': nameJson[key]['name'],\r\n            'buy': json['products'][key]['sell_summary'][0]['pricePerUnit'],\r\n            'sell': json['products'][key]['buy_summary'][0]['pricePerUnit'],\r\n            'volume': json['products'][key]['quick_status']['buyMovingWeek'],\r\n            'svolume': json['products'][key]['quick_status']['sellMovingWeek']\r\n        }\r\n    });\r\n\r\n    const buy_point = [];\r\n    const sell_point = [];\r\n\r\n    for (const item of items) {\r\n        if (item.name === \"ENCHANTED_CARROT_ON_A_STICK\") continue;\r\n        //console.log(item.buy);\r\n        if (!item_cache[item.name]) {\r\n            item_cache[item.name] = {\r\n                buy: item.buy,\r\n                sell: item.sell,\r\n                volume: item.volume,\r\n                svolume: item.svolume,\r\n                buy_ema: item.buy,\r\n                sell_ema: item.sell\r\n            }\r\n        } else {\r\n            const pre_b_ema = item_cache[item.name].buy_ema;\r\n            const pre_s_ema = item_cache[item.name].sell_ema;\r\n            const pre_b = item_cache[item.name].buy;\r\n            const pre_s = item_cache[item.name].sell;\r\n\r\n            item_cache[item.name].buy = item.buy;\r\n            item_cache[item.name].sell = item.sell;\r\n            item_cache[item.name].volume = item.volume;\r\n            item_cache[item.name].svolume = item.svolume;\r\n            item_cache[item.name].buy_ema = item.buy * k + pre_b_ema * (1 - k);\r\n            item_cache[item.name].sell_ema = item.sell * k + pre_s_ema * (1 - k);\r\n\r\n            if ((pre_b <= pre_b_ema) && (item.buy > item_cache[item.name].buy_ema)) buy_point.push(item.name);\r\n            if ((pre_s >= pre_s_ema) && (item.sell < item_cache[item.name].sell_ema)) sell_point.push(item.name);\r\n        }\r\n    }\r\n\r\n    const time = 15\r\n\r\n    const bazaarItems = advise(100000, 6, Number.isNaN(time) ? 15 : time, false, item_cache);\r\n\r\n    return {\r\n      props: {\r\n        bazaarItems,\r\n      },\r\n    }\r\n  }\r\n  \r\n  export default PersonalTable"]},"metadata":{},"sourceType":"module"}