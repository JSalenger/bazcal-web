{"ast":null,"code":"const fetch = require('node-fetch');\n\nconst path = require('path');\n\nconst fs = require('fs');\n\nlet asyncIsDone = false;\nlet item_cache = {};\n\nfunction limit(val, min, max) {\n  return val < min ? min : val > max ? max : val;\n}\n\nfunction advise(balance, count = 6, time = 5, include_stablity = true) {\n  //console.log(advise);\n  const unsorted = [];\n\n  for (const product_name in item_cache) {\n    const product = item_cache[product_name]; //console.log(product);\n\n    const profit = product.sell * 0.99 - product.buy;\n    const tvolume = Math.min(product.volume, product.svolume) / 10080 * time;\n    const evolume = Math.floor(limit(tvolume, 0, balance / product.buy));\n    const eprofit = evolume * profit;\n    unsorted.push({\n      'name': product_name,\n      'evolume': evolume,\n      'invested': (product.buy * evolume).toFixed(2),\n      'pinvested': (product.buy * evolume * 100 / balance).toFixed(1),\n      'eprofit': eprofit.toFixed(2),\n      'pprofit': (profit / product.buy * 100).toFixed(1),\n      'gradient': product.sell - product.sell_ema\n    });\n  }\n\n  const sorted = unsorted.sort((a, b) => {\n    return b.eprofit - a.eprofit;\n  }); //console.log(sorted);\n  //console.log(\"Length \" + sorted.length);\n\n  if (include_stablity) return sorted.filter(item => item_cache[item.name].buy > item_cache[item.name].buy_ema && item_cache[item.name].sell > item_cache[item.name].sell_ema).slice(0, count); //console.log(\"Length \" + sorted.length);\n  //console.log(sorted.slice(0, 6));\n\n  return sorted.slice(0, count);\n}\n\nfunction convertNumber(input) {\n  let exp = /[A-z]+/.exec(input);\n  let num = /[+-]?([0-9]*[.])?[0-9]+/.exec(input);\n\n  if (exp[0].toUpperCase() == 'M' || exp[0].toUpperCase() == 'MIL') {\n    return num[0] * 1000000;\n  } else if (exp[0].toUpperCase() == 'K') {\n    return num[0] * 1000;\n  }\n}\n\nconst formatter = new Intl.NumberFormat();\n\nfunction formatNumber(number) {\n  if (number >= 1000000) {\n    return formatter.format(round(number / 1000000, 2)) + 'M';\n  } else if (number >= 1000) {\n    return formatter.format(round(number / 1000, 2)) + 'K';\n  } else {\n    return round(number, 2);\n  }\n}\n\nfunction round(value, decimals) {\n  return Number(Math.round(value + 'e' + decimals) + 'e-' + decimals);\n}\n\nconst personalStrategy = async () => {\n  const api_res = await fetch(`https://api.hypixel.net/skyblock/bazaar?key=92e1a16e-382e-4840-b482-7966d24f2c1a`);\n  const json = await api_res.json(); //console.log(json['products']['INK_SACK:3']['sell_summary'][0]['pricePerUnit']);\n\n  const items = Object.keys(json['products']).map(function (key) {\n    if (key === 'ENCHANTED_CARROT_ON_A_STICK') return {\n      'name': \"broken\",\n      'buy': 1,\n      'sell': 1,\n      'volume': 1,\n      'svolume': 1\n    };\n    return {\n      'name': json['products'][key]['product_id'],\n      'buy': json['products'][key]['sell_summary'][0]['pricePerUnit'],\n      'sell': json['products'][key]['buy_summary'][0]['pricePerUnit'],\n      'volume': json['products'][key]['quick_status']['buyMovingWeek'],\n      'svolume': json['products'][key]['quick_status']['sellMovingWeek']\n    };\n  });\n  const buy_point = [];\n  const sell_point = [];\n\n  for (const item of items) {\n    if (item.name === \"ENCHANTED_CARROT_ON_A_STICK\") continue; //console.log(item.buy);\n\n    if (!item_cache[item.name]) {\n      item_cache[item.name] = {\n        buy: item.buy,\n        sell: item.sell,\n        volume: item.volume,\n        svolume: item.svolume,\n        buy_ema: item.buy,\n        sell_ema: item.sell\n      };\n    } else {\n      const pre_b_ema = item_cache[item.name].buy_ema;\n      const pre_s_ema = item_cache[item.name].sell_ema;\n      const pre_b = item_cache[item.name].buy;\n      const pre_s = item_cache[item.name].sell;\n      item_cache[item.name].buy = item.buy;\n      item_cache[item.name].sell = item.sell;\n      item_cache[item.name].volume = item.volume;\n      item_cache[item.name].svolume = item.svolume;\n      item_cache[item.name].buy_ema = item.buy * k + pre_b_ema * (1 - k);\n      item_cache[item.name].sell_ema = item.sell * k + pre_s_ema * (1 - k);\n      if (pre_b <= pre_b_ema && item.buy > item_cache[item.name].buy_ema) buy_point.push(item.name);\n      if (pre_s >= pre_s_ema && item.sell < item_cache[item.name].sell_ema) sell_point.push(item.name);\n    }\n  }\n\n  const time = 15;\n  const sorted_input = advise(100000, 6, Number.isNaN(time) ? 15 : time, false);\n  let response = sorted_input.map((item, i) => `${i + 1}: **${item.name.replace('_', ' ')}**\\nQuantity: **${item.evolume}**\\nInvested: **${formatNumber(item.invested)}** _(${item.pinvested}%)_\\nEstimated Profit: **${formatNumber(item.eprofit)}** _(${item.pprofit}%)_\\nSell price trend: **${item.gradient < 0 ? 'Product sell value decreasing' : 'Product sell value increasing'}**`).join('\\n\\n'); //console.log(\"response\");\n\n  return sorted_input; //console.log(response);\n};\n\nexport default personalStrategy;","map":{"version":3,"sources":["C:/Users/rsale/Documents/SSB/components/advise.js"],"names":["fetch","require","path","fs","asyncIsDone","item_cache","limit","val","min","max","advise","balance","count","time","include_stablity","unsorted","product_name","product","profit","sell","buy","tvolume","Math","volume","svolume","evolume","floor","eprofit","push","toFixed","sell_ema","sorted","sort","a","b","filter","item","name","buy_ema","slice","convertNumber","input","exp","exec","num","toUpperCase","formatter","Intl","NumberFormat","formatNumber","number","format","round","value","decimals","Number","personalStrategy","api_res","json","items","Object","keys","map","key","buy_point","sell_point","pre_b_ema","pre_s_ema","pre_b","pre_s","k","sorted_input","isNaN","response","i","replace","invested","pinvested","pprofit","gradient","join"],"mappings":"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","sourcesContent":["const fetch = require('node-fetch')\r\nconst path = require('path')\r\nconst fs = require('fs');\r\n\r\n\r\nlet asyncIsDone = false;\r\n\r\nlet item_cache = {};\r\n\r\n\r\nfunction limit(val, min, max) {\r\n    return val < min ? min : (val > max ? max : val)\r\n}\r\n\r\n\r\nfunction advise(balance, count = 6, time = 5, include_stablity = true) {\r\n    //console.log(advise);\r\n\r\n    const unsorted = []\r\n\r\n    for (const product_name in item_cache) {\r\n        const product = item_cache[product_name]\r\n        //console.log(product);\r\n        const profit = (product.sell * 0.99) - product.buy\r\n\r\n        const tvolume = (Math.min(product.volume, product.svolume) / 10080) * time\r\n        const evolume = Math.floor(limit(tvolume, 0, balance / product.buy))\r\n\r\n        const eprofit = (evolume * profit)\r\n\r\n        unsorted.push({\r\n            'name': product_name,\r\n            'evolume': evolume,\r\n            'invested': (product.buy * evolume).toFixed(2),\r\n            'pinvested': (((product.buy * evolume) * 100) / balance).toFixed(1),\r\n            'eprofit': eprofit.toFixed(2),\r\n            'pprofit': ((profit / product.buy) * 100).toFixed(1),\r\n            'gradient': product.sell - product.sell_ema\r\n        })\r\n    }\r\n\r\n    const sorted = unsorted.sort((a, b) => {\r\n        return b.eprofit - a.eprofit\r\n    })\r\n\r\n    //console.log(sorted);\r\n\r\n    //console.log(\"Length \" + sorted.length);\r\n\r\n    if (include_stablity) return sorted.filter(item => (item_cache[item.name].buy > item_cache[item.name].buy_ema) && (item_cache[item.name].sell > item_cache[item.name].sell_ema)).slice(0, count)\r\n    \r\n    //console.log(\"Length \" + sorted.length);\r\n\r\n    //console.log(sorted.slice(0, 6));\r\n\r\n    return sorted.slice(0, count);\r\n}\r\n\r\nfunction convertNumber(input) {\r\n    let exp = /[A-z]+/.exec(input)\r\n    let num = /[+-]?([0-9]*[.])?[0-9]+/.exec(input)\r\n\r\n    if (exp[0].toUpperCase() == 'M' || exp[0].toUpperCase() == 'MIL') {\r\n        return num[0] * 1000000\r\n    } else if (exp[0].toUpperCase() == 'K') {\r\n        return num[0] * 1000\r\n    }\r\n}\r\n\r\nconst formatter = new Intl.NumberFormat()\r\n\r\nfunction formatNumber(number) {\r\n    if (number >= 1000000) {\r\n        return formatter.format(round(number / 1000000, 2)) + 'M'\r\n    } else if (number >= 1000) {\r\n        return formatter.format(round(number / 1000, 2)) + 'K'\r\n    } else {\r\n        return round(number, 2)\r\n    }\r\n}\r\n\r\nfunction round(value, decimals) {\r\n    return Number(Math.round(value + 'e' + decimals) + 'e-' + decimals)\r\n}\r\n\r\n\r\nconst personalStrategy = async () =>  {\r\n\r\n    const api_res = await fetch(`https://api.hypixel.net/skyblock/bazaar?key=92e1a16e-382e-4840-b482-7966d24f2c1a`);\r\n    const json = await api_res.json();\r\n\r\n    \r\n    //console.log(json['products']['INK_SACK:3']['sell_summary'][0]['pricePerUnit']);\r\n\r\n    const items = Object.keys(json['products']).map(function (key) {\r\n        if(key === 'ENCHANTED_CARROT_ON_A_STICK') return {\r\n            'name': \"broken\",\r\n            'buy': 1,\r\n            'sell': 1,\r\n            'volume': 1,\r\n            'svolume': 1\r\n        }\r\n        return {\r\n            'name': json['products'][key]['product_id'],\r\n            'buy': json['products'][key]['sell_summary'][0]['pricePerUnit'],\r\n            'sell': json['products'][key]['buy_summary'][0]['pricePerUnit'],\r\n            'volume': json['products'][key]['quick_status']['buyMovingWeek'],\r\n            'svolume': json['products'][key]['quick_status']['sellMovingWeek']\r\n        }\r\n    });\r\n\r\n    const buy_point = [];\r\n    const sell_point = [];\r\n\r\n    for (const item of items) {\r\n        if (item.name === \"ENCHANTED_CARROT_ON_A_STICK\") continue;\r\n        //console.log(item.buy);\r\n        if (!item_cache[item.name]) {\r\n            item_cache[item.name] = {\r\n                buy: item.buy,\r\n                sell: item.sell,\r\n                volume: item.volume,\r\n                svolume: item.svolume,\r\n                buy_ema: item.buy,\r\n                sell_ema: item.sell\r\n            }\r\n        } else {\r\n            const pre_b_ema = item_cache[item.name].buy_ema;\r\n            const pre_s_ema = item_cache[item.name].sell_ema;\r\n            const pre_b = item_cache[item.name].buy;\r\n            const pre_s = item_cache[item.name].sell;\r\n\r\n            item_cache[item.name].buy = item.buy;\r\n            item_cache[item.name].sell = item.sell;\r\n            item_cache[item.name].volume = item.volume;\r\n            item_cache[item.name].svolume = item.svolume;\r\n            item_cache[item.name].buy_ema = item.buy * k + pre_b_ema * (1 - k);\r\n            item_cache[item.name].sell_ema = item.sell * k + pre_s_ema * (1 - k);\r\n\r\n            if ((pre_b <= pre_b_ema) && (item.buy > item_cache[item.name].buy_ema)) buy_point.push(item.name);\r\n            if ((pre_s >= pre_s_ema) && (item.sell < item_cache[item.name].sell_ema)) sell_point.push(item.name);\r\n        }\r\n    }\r\n\r\n    const time = 15\r\n\r\n    const sorted_input = advise(100000, 6, Number.isNaN(time) ? 15 : time, false)\r\n\r\n    let response = sorted_input.map((item, i) => `${i + 1}: **${item.name.replace('_', ' ')}**\\nQuantity: **${item.evolume}**\\nInvested: **${formatNumber(item.invested)}** _(${item.pinvested}%)_\\nEstimated Profit: **${formatNumber(item.eprofit)}** _(${item.pprofit}%)_\\nSell price trend: **${item.gradient < 0 ? 'Product sell value decreasing' : 'Product sell value increasing'}**`).join('\\n\\n');\r\n\r\n    //console.log(\"response\");\r\n    return sorted_input;\r\n    //console.log(response);\r\n}\r\n\r\nexport default personalStrategy;\r\n\r\n"]},"metadata":{},"sourceType":"module"}